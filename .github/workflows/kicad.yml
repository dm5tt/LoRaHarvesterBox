# This GitHub Action workflow runs ERC and DRC checks on all KiCad projects
# in the repository upon a push to 'main' or any pull request.
#
# It uses the INTI-CMNB/KiBot action to set up a KiCad 9 environment.
# It then uses KiCad 9's native 'kicad-cli' to perform the checks.
#
# Key features:
# - Automatically finds all .kicad_pcb files and their matching .kicad_sch files.
# - Fails the build ONLY on ERC/DRC *errors* (ignores warnings)
# - Uploads detailed .rpt files as build artifacts for inspection.

name: KiCad ERC/DRC Check

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  kicad_checks:
    # Use the latest Ubuntu runner
    runs-on: ubuntu-latest

    steps:
      # Step 1: Refresh system packagers
      # Good practice, though often optional on fresh runners
      - name: Refresh system packager mirrors and packages
        run: sudo apt-get -y update
    
      # Step 2: Check out the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 3: Set up the KiCad 9 environment
      # We use the KiBot action as an efficient installer for KiCad
      - name: Set up KiCad environment
        uses: INTI-CMNB/KiBot@v2_k9
        with:
          # Install KiCad (required for kicad-cli)
          install_kicad: true
          # Specify KiCad version 9
          kicad_version: 9
          # Adds caching for 3D models, speeding up future runs
          cache3D: true

      # Step 4: Find and check all projects
      - name: Find and check all KiCad projects and report errors
        run: |
          # Exit immediately if any command (outside the loop's '||') fails
          set -e
          
          # Create a directory to store the report files
          mkdir -p drc_reports
          
          # This flag will be set to 1 if any check fails
          HAS_ERRORS=0

          echo "Searching for KiCad projects..."

          # Use 'find' to search recursively for all PCB files
          # The 'while' loop reads each found file, handling spaces
          find . -name "*.kicad_pcb" | while read -r PCB_FILE; do
            
            # Derive paths and names from the PCB file
            DIR=$(dirname "$PCB_FILE")
            BASE_NAME=$(basename "$PCB_FILE" .kicad_pcb)
            
            # Construct the expected schematic file path
            SCH_FILE="$DIR/$BASE_NAME.kicad_sch"
            
            # Define report file names
            ERC_REPORT="drc_reports/${BASE_NAME}.erc.rpt"
            DRC_REPORT="drc_reports/${BASE_NAME}.drc.rpt"

            # Only run checks if a matching schematic file exists
            if [ -f "$SCH_FILE" ]; then
              echo "---"
              echo "Checking Project: $DIR/$BASE_NAME"
              
              # --- ERC Check ---
              echo "Running ERC on: $SCH_FILE"
              # Use KiCad 9's native CLI for ERC
              # --severity-error causes this to fail (return > 0) ONLY on errors
              kicad-cli sch erc \
                --output "$ERC_REPORT" \
                --units mm \
                --severity-error \
                "$SCH_FILE" || HAS_ERRORS=1
              
              # --- DRC Check ---
              echo "Running DRC on: $PCB_FILE"
              # Use KiCad 9's native CLI for DRC
              # --schematic-parity checks for PCB/schematic differences
              # --severity-error causes this to fail ONLY on errors
              kicad-cli pcb drc \
                --output "$DRC_REPORT" \
                --units mm \
                --schematic-parity \
                --severity-error \
                "$PCB_FILE" || HAS_ERRORS=1

            else
              echo "---"
              echo "Skipping: $PCB_FILE (No matching schematic found at $SCH_FILE)"
            fi
          done

          # After checking all files, exit with an error if any check failed
          if [ "$HAS_ERRORS" -ne 0 ]; then
            echo "---"
            echo "One or more projects failed ERC or DRC (error-level)!"
            echo "Check the 'kicad-reports' artifact for details."
            exit 1
          else
            echo "---"
            echo "All projects passed ERC/DRC (error-level checks)."
            echo "Warnings may still exist but were ignored as requested."
          fi

      # Step 5: Upload the reports
      # 'if: always()' ensures this step runs even if Step 4 failed
      # This allows you to download and view the reports of the failed build
      - name: Upload ERC/DRC Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: kicad-reports
          path: drc_reports/
